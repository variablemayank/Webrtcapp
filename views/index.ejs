<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" type="text/css" href="style.css" />
  </head>
  <body>
    <div>
      Video :
      <select id="camera"></select>
    </div>
    <p>
      <button id="takeProfilePicture" type="button" autoFocus="true">
        Create Profile Picture
      </button>
    </p>
    <video id="videoTag" autoplay></video>
    <canvas id="profilePicCanvas" style="display: none"> </canvas>
    <div>
      <img id="profilePictureOutput" />
    </div>
  </body>

  <script>
    // Element Tags
    var videoArea = document.querySelector("video");
    var videoSelect = document.querySelector("#camera");
    var profilePicCanvas = document.querySelector("#profilePicCanvas");
    var profilePictureOutput = document.querySelector("#profilePictureOutput");
    var takePicButton = document.querySelector("#takeProfilePicture");
    var videoTag = document.querySelector("#videoTag");

    var width = 240;
    var height = 0;
    var streaming = false;
    takePicButton.addEventListener(
      "click",
      function (ev) {
        takeProfilePic();
        ev.preventDefault();
      },
      false
    );

    videoTag.addEventListener(
      "canplay",
      function (env) {
        if (!streaming) {
          height = videoTag.videoHeight / (videoTag.videoWidth / width);
          if (isNaN(height)) {
            height = width / (4 / 3);
          }
          videoTag.setAttribute("width", width);
          videoTag.setAttribute("height", height);
          profilePicCanvas.setAttribute("width", width);
          prfCanvas.setAttribute("height", height);
          streaming = true;
        }
      },
      false
    );

    function takeProfilePic() {
      var context = profilePicCanvas.getContext("2d");
      if (width && height) {
        profilePicCanvas.width = width;
        profilePicCanvas.height = height;
        context.drawImage(videoTag, 0, 0, width, height);

        var data = profilePicCanvas.toDataURL("image/png");
        profilePictureOutput.setAttribute("src", data);
      }
    }
    navigator.getUserMedia =
      navigator.getUserMedia ||
      navigator.webkitGetUserMedia ||
      navigator.mozGetUserMedia;

    var videoSource = videoSelect.value;
    var constraints = {
      audio: false,
      video: {
        mandatory: {
          minWidth: 640,
          maxWidth: 640,
          maxHeight: 480,
          minHeight: 340,
        },
        optional: [
          {
            sourceId: videoSource,
          },
        ],
      },
    };
    videoSelect.onchange = startStream;
    startStream();

    navigator.mediaDevices
      .enumerateDevices()
      .then(function (devices) {
        devices.forEach(function (device) {
          var option = document.createElement("option");
          option.value = device.deviceId;
          if (device.kind === "videoinput") {
            option.text = device.label || "camera" + (videoSelect.length + 1);
            videoSelect.appendChild(option);
          }
          // } else if (device.kind == 'audioinput') {
          //     option.text = device.label || 'mic' + (audioSelect.length + 1);
          //     audioSelect.appendChild(option);
          // }
        });
      })
      .catch(function (err) {
        console.log(err.name + ": " + err.message);
      });

    function startStream() {
      navigator.getUserMedia(constraints, onSuccess, onError);
    }

    function onSuccess(stream) {
      console.log("Success! we have a strram");
      videoArea.srcObject = stream;
      videoArea.className = "greyscale_filter";
      videoArea.play();
    }
    function onError(error) {
      console.log("Error with getUserMedia");
    }
  </script>
</html>
